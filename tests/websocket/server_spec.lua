local get_fake_client = require("tests.websocket.shared").get_fake_client
local get_server = require("tests.websocket.shared").get_server
local sleep = require("tests.websocket.shared").sleep
local range = require("tests.websocket.shared").range
local generate_longstr = require("tests.websocket.shared").generate_longstr

describe("connection", function()
    it("establish", function()
        local server = get_server("127.0.0.1", 9101)
        local client = get_fake_client("ws://127.0.0.1:9101", "connection_establish")
        local connect = server.recv_connect()
        assert.is_not_nil(connect)
        assert.is_not_nil(client)
        assert.is_true(connect.is_connected())
        assert.is_true(client.is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
    it("multiple client", function()
        local server = get_server("127.0.0.1", 9102)
        local clients = vim.iter(range(0, 10)):map(function(i)
            return get_fake_client("ws://127.0.0.1:9102", "connection_establish")
        end)

        local connects = clients:map(function(client)
            return server.recv_connect()
        end)
        clients:each(function(client)
            assert.is_true(client.is_connected())
            client.assert_empty_queue()
        end)
        connects:each(function(connect)
            assert.is_true(connect.is_connected())
            connect.assert_empty_queue()
        end)
        sleep(10000)
    end)
end)

describe("disconnection", function()
    it("client side", function()
        local server = get_server("127.0.0.1", 9202)
        local client = get_fake_client("ws://127.0.0.1:9202", "connection_client_disconnect")
        local connect = server:recv_connect()
        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)

    it("server side", function()
        local server = get_server("127.0.0.1", 9203)
        local client = get_fake_client("ws://127.0.0.1:9203", "connection_server_disconnect")
        local connect = server:recv_connect()
        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        connect:disconnect()
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)

describe("transport", function()
    it("server->client", function()
        local server = get_server("127.0.0.1", 9304)
        local client = get_fake_client("ws://127.0.0.1:9304", "server2client")
        local connect = server.recv_connect()
        connect.send("foo")
        assert.is_equal("foo", client.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
    it("client->server", function()
        local server = get_server("127.0.0.1", 9305)
        local client = get_fake_client("ws://127.0.0.1:9305", "client2server")
        local connect = server.recv_connect()
        assert.is_equal("bar", connect.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
    it("client->server:heavy payload", function()
        local server = get_server("127.0.0.1", 9315)
        local client = get_fake_client("ws://127.0.0.1:9315", "client2server_big")
        local connect = server.recv_connect()
        local data = generate_longstr(1024)
        assert.is_equal(data, connect.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
    it("server->client->server", function()
        local server = get_server("127.0.0.1", 9406)
        local client = get_fake_client("ws://127.0.0.1:9406", "server2client2server")
        local connect = server.recv_connect()
        connect.send("foo")
        assert.is_equal("foo", client.recv())
        assert.is_equal("foo", connect.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
    it("server->client->server: heavy pyload", function()
        local server = get_server("127.0.0.1", 9416)
        local client = get_fake_client("ws://127.0.0.1:9416", "server2client2server")
        local connect = server.recv_connect()
        local data = generate_longstr(100)
        connect.send(data)
        assert.is_equal(data, connect.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        connect.assert_empty_queue()
    end)

    it("client->server->client", function()
        local server = get_server("127.0.0.1", 9407)
        local client = get_fake_client("ws://127.0.0.1:9407", "client2server2client")
        local connect = server.recv_connect()
        local text = connect.recv()
        assert.is_equal("bar", text)
        connect.send(text)
        assert.is_equal("bar", client.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)

describe("pulse", function()
    it("server->client x 10000", function()
        local server = get_server("127.0.0.1", 9508)
        local client = get_fake_client("ws://127.0.0.1:9508", "pulse_server")
        local connect = server.recv_connect()

        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        for i in range(0, 10000) do
            local text = string.format("foo:%s", i)
            connect.send(text)
            assert.is_equal(text, client.recv())
            -- sleep(10000)
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)

    it("client->server x 10000", function()
        local server = get_server("127.0.0.1", 9509)
        local client = get_fake_client("ws://127.0.0.1:9509", "pulse_client")
        local connect = server.recv_connect()
        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        for i in range(0, 10000) do
            local text = string.format("bar:%s", i)
            assert.is_equal(text, connect.recv())
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)

describe("reflex", function()
    it("server->client->server x 10000", function()
        local server = get_server("127.0.0.1", 9610)
        local client = get_fake_client("ws://127.0.0.1:9610", "reflex_server")
        local connect = server.recv_connect()

        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        for i in range(0, 10000) do
            connect.send(string.format("foo:%s", i))
            assert.is_equal(string.format("bar:%s", i + 1), connect.recv())
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)

    it("server->client->server:heavy payload x 10", function()
        local server = get_server("127.0.0.1", 9620)
        local client = get_fake_client("ws://127.0.0.1:9620", "reflex_server_big")
        local connect = server.recv_connect()

        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        local raw_str = generate_longstr()
        do
            local data = raw_str .. ""
            for i in range(0, 8) do
                connect.send(data)
                data = data .. data
            end
        end
        do
            local expect = raw_str .. raw_str
            for i in range(0, 8) do
                local result = connect.recv()
                assert.is_equal(#expect, #result)
                assert.is_equal(expect, result)
                expect = expect .. expect
            end
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)

    it("client->server->client x 10000", function()
        local server = get_server("127.0.0.1", 9611)
        local client = get_fake_client("ws://127.0.0.1:9611", "reflex_client")
        local connect = server.recv_connect()
        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        for i in range(0, 10000) do
            local text = connect.recv()
            local t = vim.split(text, ":")
            assert.is_equal("bar", t[1])
            local ack = string.format("foo:%s", tonumber(t[2]) + 1)
            connect.send(ack)
            assert.is_equal(ack, client.recv())
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)
