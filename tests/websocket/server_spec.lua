local get_fake_client = require("tests.websocket.shared").get_fake_client
local get_server = require("tests.websocket.shared").get_server
local sleep = require("tests.websocket.shared").sleep
local range = require("tests.websocket.shared").range

describe("connection", function()
    it("establish", function()
        local server = get_server("127.0.0.1", 9001)
        local client = get_fake_client("ws://127.0.0.1:9001", "connection_establish")
        local connect = server.recv_connect()
        assert.is_not_nil(connect)
        assert.is_not_nil(client)
        assert.is_true(connect.is_connected())
        assert.is_true(client.is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)

describe("disconnection", function()
    it("client side", function()
        local server = get_server("127.0.0.1", 9002)
        local client = get_fake_client("ws://127.0.0.1:9002", "connection_client_disconnect")
        local connect = server:recv_connect()
        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)

    it("server side", function()
        local server = get_server("127.0.0.1", 9003)
        local client = get_fake_client("ws://127.0.0.1:9003", "connection_server_disconnect")
        local connect = server:recv_connect()
        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        connect:disconnect()
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)

describe("transport", function()
    it("server->client", function()
        local server = get_server("127.0.0.1", 9004)
        local client = get_fake_client("ws://127.0.0.1:9004", "server2client")
        local connect = server.recv_connect()
        connect.send("foo")
        assert.is_equal("foo", client.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
    it("client->server", function()
        local server = get_server("127.0.0.1", 9005)
        local client = get_fake_client("ws://127.0.0.1:9005", "client2server")
        local connect = server.recv_connect()
        assert.is_equal("bar", connect.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
    it("server->client->server", function()
        local server = get_server("127.0.0.1", 9006)
        local client = get_fake_client("ws://127.0.0.1:9006", "server2client2server")
        local connect = server.recv_connect()
        connect.send("foo")
        assert.is_equal("foo", client.recv())
        assert.is_equal("foo", connect.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)

    it("client->server->client", function()
        local server = get_server("127.0.0.1", 9007)
        local client = get_fake_client("ws://127.0.0.1:9007", "client2server2client")
        local connect = server.recv_connect()
        local text = connect.recv()
        assert.is_equal("bar", text)
        connect.send(text)
        assert.is_equal("bar", client.recv())
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)

describe("pulse", function()
    it("server->client x 10000", function()
        local server = get_server("127.0.0.1", 9008)
        local client = get_fake_client("ws://127.0.0.1:9008", "pulse_server")
        local connect = server.recv_connect()

        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        for i in range(0, 10000) do
            local text = string.format("foo:%s", i)
            connect.send(text)
            assert.is_equal(text, client.recv())
            -- sleep(10000)
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)

    it("client->server x 10000", function()
        local server = get_server("127.0.0.1", 9009)
        local client = get_fake_client("ws://127.0.0.1:9009", "pulse_client")
        local connect = server.recv_connect()
        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        for i in range(0, 10000) do
            local text = string.format("bar:%s", i)
            assert.is_equal(text, connect.recv())
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)

describe("reflex", function()
    it("server->client->server x 10000", function()
        local server = get_server("127.0.0.1", 9010)
        local client = get_fake_client("ws://127.0.0.1:9010", "reflex_server")
        local connect = server.recv_connect()

        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        for i in range(0, 10000) do
            -- print(i)
            connect.send(string.format("foo:%s", i))
            assert.is_equal(string.format("bar:%s", i + 1), connect.recv())
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)

    it("client->server->client x 10000", function()
        local server = get_server("127.0.0.1", 9011)
        local client = get_fake_client("ws://127.0.0.1:9011", "reflex_client")
        local connect = server.recv_connect()

        assert.is_true(connect:is_connected())
        assert.is_true(client:is_connected())
        for i in range(0, 10000) do
            local text = connect.recv()
            local t = vim.split(text, ":")
            assert.is_equal("bar", t[1])
            local ack = string.format("foo:%s", tonumber(t[2]) + 1)
            connect.send(ack)
            assert.is_equal(ack, client.recv())
        end
        sleep(1000)
        assert.is_false(connect:is_connected())
        assert.is_false(client:is_connected())
        client.assert_empty_queue()
        connect.assert_empty_queue()
    end)
end)
